*zeef.txt*	For Vim version 8.2	Last change: 2020 Oct 07

			______          ________                         ~
			___  /_____________  __/                         ~
			__  / _  _ \  _ \_  /_                           ~
			_  /__/  __/  __/  __/                           ~
			/____/\___/\___//_/                              ~

Author:  Lifepillar <https://github.com/lifepillar>
License: Public Domain

==============================================================================
CONTENTS				*zeef-contents*

	1.  Introduction .............. |zeef-introduction|
	2.  Requirements .............. |zeef-requirements|
	3.  Function .................. |zeef-functions|
	4.  Customization ............. |zeef-customization|

==============================================================================
1. Introduction				*zeef-introduction*

Zeef is a minimalist dynamic interactive filter for a |List| of items. It does
not define any command or mapping.  It is used by invoking |zeef#open()|. Try
this "zeef":
>
	:fun Callback(result)
	:  echo a:result
	:endf
	:call zeef#open(['Jan', 'Jun', 'Jul'], 'Callback', 'Choose')
<
Start typing to filter the list. Press <enter> to invoke the callback with the
selected item(s) (multiple selections are possibleâ€”see below). Press <esc> to
cancel. The following is the complete list of keys you can use when the Zeef
buffer is open.

- <c-k> or <up>: move up one line;
- <c-j> or <down>: move down one line;
- <left> and <right>: scroll horizontally;
- <c-b>, <c-f>, <c-d>, <c-u>, <c-e>, <c-y>: usual movements;
- <c-l>: clear the prompt;
- <c-g>: clear the prompt and deselect all items;
- <c-z>: toggle the selection of the current line;
- <c-a>: select all currently filtered lines;
- <c-r>: deselect all currently filtered lines;
- <esc>, <c-c>: close Zeef without performing any action;
- <enter>: accept the current choice;
- <c-s>, <c-v>, <c-t>: like <enter>, but also open a horizontal split,
  vertical split or tab.

For overriding such mappings, see |g:zeef_keymap| and |zeef#open()|.

How does Zeef differ from the several similar plugins already out there, you
ask? The implementation is likely the simplest possible: as you type,
|:global| is used to remove the lines that do not match what you are typing.
When you press backspace, |:undo| is used to restore the previous state. Yes,
the core of this plugin is based on just those two Vim commands. It works
surprisingly well, unless your list is huge (hundreds of thousands of lines).

What can you do with Zeef? Whatever you want! Zeef is not bloated with
features that you will never use: it is for people who wish to implement their
own functionality with minimal help. That said, Zeef does come with a few
"sample applications", also called "zeefs":

- a buffer switcher;
- a path filter;
- a quickfix/location list filter;
- a color scheme selector;
- a buffer tag chooser.

See the source code for reference. It's not that complicated.

Ah, before you ask: the answer is no. Zeef does *not* perform fuzzy search,
approximate search, match rankings, or other esoteric stuff. All that is out
of the scope of this project. Those are features that are well covered by
other plugins, after all.

==============================================================================
2. Requirements					*zeef-requirements*

Zeef is 100% Vim script. It should work in Vim 7.4 or later. The only recent
feature that Zeef uses is |text-properties|, to highlight selected matches. It
will work even without that: you will still be able to perform multiple
selections, but you will not get any visual feedback.

==============================================================================
3. Functions					*zeef-functions*

						|zeef#open()|
The arguments of the function are:

1. a |List| of items;
2. the name of a callback function;
3. the text for the command line prompt;
4. (optional) a |Dictionary| as in |g:zeef_keymap|.

For instance:
>
	:call zeef#open(['A', 'B', 'C'], 'Callback', 'Choose',
	    \ { "\<c-d>": function("MyOwnFunction") })
<
						|zeef#args()|
Filters a list of paths and populate the arglist with the selected items. For
example:
>
	:call zeef#args(v:oldfiles)
<
						|zeef#buffer()|
Opens a buffer switcher. The function takes a |Dictionary| as its only
argument. Such a dictionary may have the following key:

- `unlisted`: when set to 1, include unlisted buffers.

For example:
>
	:call zeef#buffer(#{unlisted: 0})
<
						|zeef#buffer_tags()|
Filters tags in the current buffer and jumps to a tag. Requires |ctags|.
>
	:call zeef#buffer_tags()
<
						|zeef#colorscheme()|
Selects a color scheme.
>
	:call zeef#colorscheme()
<
						|zeef#files()|
Filters the list of paths inside a specified directory and populate the
arglist with the selected items. For example:
>
	:call zeef#files('~/.vim')
<
The path is optional: if not specified, the current directory is used.

						|zeef#keypressed()|
The most recently pressed key. You may use this function in your callback to
determine how the Zeef buffer was dismissed. For example, suppose you want to
define a zeef similar to |zeef#buffer()|, but one that will delete buffers
when CTRL-D is pressed. A slightly simplified definition may look as follows:
>
	fun! Buffers() abort
	  let l:buffers = split(execute('ls'), "\n")
	  call zeef#open(l:buffers, 'Callback', 'Choose', 
	      \ { "\<c-d>": function('zeef#accept') })
	endfun

	fun! Callback(result) abort
	  if zeef#keypressed() == "\<c-d>"
	    for l:item in a:result
	      echo ":bdelete " .. matchstr(l:item, '^\s*\zs\d\+')
	    endfor
	  else
	    echo "Do smth else with the result"
	  endif
	endfun

	:call Buffers()
<
						|zeef#loclist()|
Filters the lines of a location list and jumps to the selected item (if more
than one item is selected, jumps to the first one). The argument of this
function is the window number of a location list. Pass 0 to use the location
list for the current window. For instance:
>
	:call zeef#loclist(0)
<
						|zeef#qflist()|
Filters the lines of the quickfix list and jumps to the selected item (if more
than one item is selected, jumps to the first one).
>
	:call zeef#qflist()
<
						|zeef#result()|
The |List| resulting from filtering the entries in the Zeef buffer. This may
be useful if you need to define a custom action. For instance, an alternative
to the code shown in |zeef#keypressed()| is the following:
>
	fun! DeleteBuffers()
	  call zeef#close('')
	  let l:result = zeef#result() " <== Retrieve the filtered list
	  for l:item in l:result
	    echo ":bdelete " .. matchstr(l:item, '^\s*\zs\d\+')
	  endfor
	  return 1 " This MUST return 1 if you close Zeef
	endf
	
	fun! Buffers() abort
	  let l:buffers = split(execute('ls'), "\n")
	  call zeef#open(l:buffers, 'Callback', 'Choose',
	        \ { "\<c-d>": function('DeleteBuffers') })
	endfun
	
	fun! Callback(result) abort
	  echo "Do smth else with result"
	endfun

	:call Buffers()
<
In this case, the callback handles some default behaviour, but pressing CTRL-D
triggers a custom action to delete the selected buffers.

=============================================================================
4. Customization				*zeef-customization*

Zeef defines three highlight groups, which you may redefine in your |vimrc|:

- `ZeefMatch`: used for highlighting the matching characters;
- `ZeefName`: used for highlighting the name of the buffer in the status line;
- `ZeefSelected`: used for highlighting the selected lines.

Besides, Zeef provides the following options:

						*'g:zeef_ctags_types'*
A dictionary used to map Vim filetypes to Ctags language names. This is used
by |zeef#buffer_tags()|.
>
	let g:zeef_ctags_types = {
	\    'aspperl': 'asp',
	\    'aspvbs':  'asp',
	\    'cpp':     'c++',
	\    ...
	\ }
<
						*'g:zeef_keymap'*
A |Dictionary| that maps a key to a function that performs an action. See the
source code for the full definition. You may override any key, add your own
mappings and map your own functions.

Note: you may also override some mappings for a single zeef: see
|zeef#open()|.

						*'g:zeef_height'*
The height of the Zeef buffer.
>
	let g:zeef_height = 10
<
						*'g:zeef_name'*
The label of the Zeef buffer, as it appears in the status line.
>
	let g:zeef_name = 'Zeef'
<
						*'g:zeef_prompt'*
The symbol(s) to be used for the command line prompt:
>
	let g:zeef_prompt = '> '
<
						*'g:Zeef_regexp'*
A function, funcref, or lambda, which receives as input the text typed by the
user and must return a |'magic'| regular expression to filter the list. The
default function behaves mostly like globbing, except that ^ and $ can be used
to anchor a pattern. All characters are matched literally except ^, $, and *;
the latter matches zero 0 more characters.

Note the capital Z of this option!

						*'g:zeef_skip_first'*
Do not start filtering until at least this number of characters has been
typed.
>
	let g:zeef_skip_first = 0
<
 vim:tw=78:ts=8:noet:ft=help:norl:
