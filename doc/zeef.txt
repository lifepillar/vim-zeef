*zeef.txt*	For Vim version 8.2	Last change: 2020 Oct 07

			______          ________                         ~
			___  /_____________  __/                         ~
			__  / _  _ \  _ \_  /_                           ~
			_  /__/  __/  __/  __/                           ~
			/____/\___/\___//_/                              ~

Author:  Lifepillar <https://github.com/lifepillar>
License: Public Domain

==============================================================================
CONTENTS				*zeef-contents*

	1.  Introduction .............. |zeef-introduction|
	2.  Requirements .............. |zeef-requirements|
	4.  Customization ............. |zeef-customization|

==============================================================================
1. Introduction				*zeef-introduction*

Zeef is a minimalist dynamic interactive filter for a |List| of items. It is
used by invoking `zeef#open()`. Zeef does not define any command or mapping.
The arguments of the function are:

1. A |List| of items;
2. The name of a callback function;
3. The text for the command line prompt.

Try it:
>
	:fun Callback(result)
	:  echo a:result
	:endf
	:call zeef#open(['Jan', 'Jun', 'Jul'], 'Callback', 'Choose')
<
Start typing to filter the list. Press <enter> to invoke the callback with the
selected item(s) (multiple selections are possibleâ€”see below). Press <esc> to
cancel. The following is the complete list of keys you can use when the Zeef
buffer is open (these can be customized with |g:zeef_keymap|):

- <c-k> or <up>: move up one line;
- <c-j> or <down>: move down one line;
- <left> and <right>: scroll horizontally;
- <c-b>, <c-f>, <c-d>, <c-u>, <c-e>, <c-y>: usual movements;
- <c-l>: clear the prompt;
- <c-z>: select/deselect the current line;
- <esc>: close Zeef without performing any action;
- <enter>: accept the current choice;
- <c-s>, <c-v>, <c-t>: like <enter>, but also open a split, vertical split or
  tab.

How does Zeef differ from the several similar plugins already out there, you
ask? The implementation is likely the simplest possible: as you type,
|:global| is used to remove the lines that do not match what you are typing.
When you press backspace, |:undo| is used to restore the previous state. Yes,
the core of this plugin is based on just those two Vim commands. It works
surprisingly well, unless your list is huge (hundreds of thousands of lines).

What can you do with Zeef? Whatever you want! Zeef is not bloated with
features that you will never use: it is for people who wish to implement their
own functionality with minimal help. That said, Zeef does come with a few
"sample applications":

- a buffer switcher;
- a path filter;
- a quickfix/location list filter;
- a color scheme selector;
- a buffer tag chooser.

See the source code for reference. It's not that complicated.

Ah, before you ask: the answer is no. Zeef does *not* perform fuzzy search,
approximate search, match rankings, or other esoteric stuff. All that is out
of the scope of this project. Those are features that are well covered by
other plugins, after all.

==============================================================================
2. Requirements					*zeef-requirements*

Zeef is 100% Vim script. It should work in Vim 7.4 or later. The only recent
feature that Zeef uses is |text-properties| (to highlight selected matches),
but it works without it (you will still be able to perform multiple
selections, but you will not get any visual feedback).

=============================================================================
4. Customization				*zeef-customization*

Zeef defines three highlight groups, which you may redefine in your |vimrc|:

- `ZeefMatch`: used for highlighting the matching characters;
- `ZeefName`: used for highlighting the name of the buffer in the status line;
- `ZeefSelected`: used for highlighting the selected lines.

Besides, Zeef provides the following options:

						*'g:zeef_ctags_types'*
A dictionary used to map Vim filetypes to Ctags language names. This is used
by the buffer tags "sample application", which requires Ctags.
>
	let g:zeef_ctags_types = {
	\    'aspperl': 'asp',
	\    'aspvbs':  'asp',
	\    'cpp':     'c++',
	\    ...
	\ }
<
						*'g:zeef_keymap'*
A dictionary that maps a key to a function that performs an action. See the
source code for the full definition. You may override any key, add your
own mappings and map your own functions.

						*'g:zeef_height'*
The height of the Zeef buffer.
>
	let g:zeef_height = 10
<
						*'g:zeef_name'*
The label of the Zeef buffer, as it appears in the status line.
>
	let g:zeef_name = 'Zeef'
<
						*'g:zeef_prompt'*
The symbol(s) to be used for the command line prompt:
>
	let g:zeef_prompt = '> '
<
						*'g:Zeef_regexp'*
A function, funcref, or lambda, which receives as input the text typed by the
user and must return a |'magic'| regular expression to filter the list. The
default function behaves mostly like globbing, except that ^ and $ can be used
to anchor a pattern. All characters are matched literally except ^, $, and *;
the latter matches zero 0 more characters.

Note the capital Z of this option!

						*'g:zeef_skip_first'*
Do not start filtering until at least this number of characters has been
typed.
>
	let g:zeef_skip_first = 0
<
 vim:tw=78:ts=8:noet:ft=help:norl:
