*zeef.txt*	For Vim version 9.1	Last change: 2024 May 11

			______          ________                         ~
			___  /_____________  __/                         ~
			__  / _  _ \  _ \_  /_                           ~
			_  /__/  __/  __/  __/                           ~
			/____/\___/\___//_/                              ~

Author:  Lifepillar <https://github.com/lifepillar>
License: MIT

==============================================================================
CONTENTS				*zeef-contents*

	1.  Introduction .............. |zeef-introduction|
	2.  Functions ................. |zeef-functions|
	3.  Customization ............. |zeef-customization|

==============================================================================
1. Introduction				*zeef-introduction*

Zeef is a pure autoload interactive exact and fuzzy filter for a |List| of
items, entirely written in Vim 9 script. Zeef requires Vim 9.1 or later, built
with |+popupwin| and |+textprop|. Vim 9.1.403 or later is recommended.

Zeef does not define any command or mapping: that is left as a task for the
user (an example is at the end of this section). It is used by invoking
|zeef.Open()|:
>
	:call zeef#Open(['January', 'July', 'Julian', 'adjective', 'every'])
<
Start typing to filter the list. Press <tab> to select an item: that will
automatically open the "Selected Items" popup, which displays the currently
selected items. Press <enter> to invoke a callback with the selected item(s),
or with the item under the cursor if nothing was selected. Press <esc> to
cancel. The default callback just echoes the selected items.

By default, fuzzy matching is used: see |matchfuzzy()| for details, and
|zeef.limit| and |zeef.matchseq| for configuration. It is possible to switch
to exact matching at any time by pressing <c-z> (CTRL-Z): then, the input acts
mostly as a globbing pattern where each character is matched literally except
for `^`, `$`, and <space>: the former two anchor the match to the start or the
end of a line, respectively, while <space> acts as a wildchar matching zero or
more characters. You may change the wildchar with |zeef.wildchar|.

The following is the complete list of special keys you can use when Zeef is
open:

- <c-k> (CTRL-K) or <up> (up arrow): moves up one line.
- <c-j> (CTRL-J) or <down> (down arrow): moves down one line.
- <left> (left arrow) and <right> (right arrow): scrolls horizontally.
- <c-b> (CTRL-B), <c-f> (CTRL-F): usual Vim window movements.
- <c-d> (CTRL-D), <c-u> (CTRL-U): usual Vim window movements.
- <c-e> (CTRL-E), <c-y> (CTRL-Y): usual Vim line movements.
- <bs> (backspace): deletes one character from the prompt.
- <c-l> (CTRL-L): clears the prompt.
- <tab> (Tab): selects the current item.
- <s-tab> (Shift-Tab): deselects the current item.
- <c-x> (CTRL-X): toggles the selection of the current item.
- <c-g> (CTRL-G): deselects all items.
- <c-a> (CTRL-A): selects all currently filtered items.
- <c-r> (CTRL-R): deselects all currently filtered items.
- <c-p> (CTRL-P): toggles the display of the Selected Items popup.
- <c-z> (CTRL-Z): toggles between exact and fuzzy matching.
- <esc> (Esc), <c-c> (CTRL-C): closes Zeef without performing any action.
- <enter> (Enter): accepts the current choice.
- <c-s> (CTRL-S), <c-v> (CTRL-V), <c-t> (CTRL-T): same as <enter>, but also
  open a horizontal split, vertical split or tab window, respectively.

Zeef supports using the mouse (see 'mouse'): you may select and deselect by
clicking on an item, and you may use the mouse to scroll both vertically and
horizontally. These are the supported mouse events:

- <LeftMouse>: in the Zeef buffer, selects or deselects an item; in the
  Selected Items popup, removes an item from the list of selected items.
- <ScrollWheelUp>, <ScrollWheelDown>: vertical scrolling.
- <ScrollWheelLeft>, <ScrollWheelRight>: horizontal scrolling in the Zeef
  buffer.

Any of the previous mappings can be overridden: see |zeef-customization|.

Zeef comes with a few simple predefined "zeefs":

- a buffer switcher;
- a path filter;
- a quickfix/location list filter;
- a color scheme selector;
- a buffer tag chooser.

See |zeef-functions| for a description of each zeef.

While those provide useful functionality out of the box, Zeef encourages you
to define your own zeefs that fit exactly your needs. Refer to the source code
to see how that can be done: it is not complicated!

If you want to define a command or a mapping for a zeef in your |vimrc|, you
may do it as follows:
>
	import autoload 'zeef.vim'

	# Define a command to browse recent files
	command! -nargs=0 OldFiles zeef.Args(v:oldfiles)

	# Define a mapping for the same purpose
	nnoremap <c-n> <scriptcmd>zeef.Args(v:oldfiles)<cr>
<
Note: before Vim 9.1.0403, you may have to create a symbolic link in your
Vim's autoload directory for the autoload import to work. For instance:
>
	mkdir -p ~/.vim/autoload
	cd ~/.vim/autoload
	ln -s ../pack/plugins/start/zeef/autoload/zeef.vim zeef.vim
<
==============================================================================
2. Functions					*zeef-functions*


Open({items}, [{func}, {label}, {opts}])	*zeef.Open()*
		Open a Zeef buffer at the bottom of the screen, populated with
		a |List| of {items}.

		If present, {func} must be a function or lambda that receives
		a |List| of |String|s and does not return anything. The
		function is invoked when the user accepts the prompt by
		pressing <enter> or equivalent key. The function is not
		invoked if the user cancels the operation with Esc or CTRL-C.

		The {label} is a |String| shown in the command-line before
		the cursor. It should be short and informative about the
		purpose of the zeef.

		{opts} is a |Dictionary| which may contain the following
		entries:

		- `multi`: set to |true| to allow multiple selections (the
		  default); set to |false| for single selection.
		- `skipfirst`: the number of characters to type before
		  starting to filter. Overrides |zeef.skipfirst|.
		- `dupinsert`: when |true|, multiple identical items may be
		  added to the list of selected items. By default, 
		  selected entries are kept unique.
		- `dupdelete`: when |true|, removing an item from the selected
		  items deletes all the copies of that item. By default,
		  only the first copy is deleted. Of course, if `dupinsert` is
		  set to |false|, the value of `dupdelete` is irrelevant.
		- `keyaliases`: this is a dictionary like |zeef.keyaliases|, but
		  only for the current Zeef buffer. Takes precedence on
		  |zeef.keyaliases| for matching keys.
		- `keymap`: this is a dictionary like |zeef.keymap|, but only
		  for the current Zeef buffer. Takes precedence on
		  |zeef.keymap| for matching keys.

Args({paths}[, {opts}])				*zeef.Args()*
		Interactively filter a list of paths and populate the arglist
		with the selected items. For example:
>
		:call zeef#Args(v:oldfiles)
<
		For {opts}, see |zeef.Open()|. See also |zeef.Files()|.

BufferSwitcher([{props}, {opts}])		*zeef.BufferSwitcher()*
		Open a buffer switcher. By default, unlisted buffers are not
		shown: to include unlisted buffers, use the {props} argument
		set to {unlisted: true}.
>
 		:call zeef#BufferSwitcher({'unlisted': 1})
<
		For {opts}, see |zeef.Open()|. 

BufferTags([{types}, {bin}, {opts}])		*zeef.BufferTags()*
		Interactively filter the tags in the current buffer and jumps
		to the selected tag. Requires |ctags|. {types} is
		a |Dictionary| mapping Ctags types to Vim filetypes. {bin} is
		the path of the Ctags executable, if the executable is not in
		$PATH.
>
		:call zeef#BufferTags()
<
		For {opts}, see |zeef.Open()|. 

ColorschemeSwitcher([{opts}])			*zeef.ColorschemeSwitcher()*
		Select a color scheme.
>
		:call zeef#ColorschemeSwitcher()
<
		For {opts}, see |zeef.Open()|. 

Files([{dir}, {opts}])				*zeef.Files()*
		Interactively filter the list of paths inside a given
		directory and populate the arglist with the selected items. If
		{dir} is not provided, the current working directory is used:
		see |getcwd()|. The list is built using an external program:
		`ripgrep` if that is available, otherwise `find`. For example:
>
		:call zeef#Files('~/.vim')
<
		For {opts}, see |zeef.Open()|. See also |zeef.Args()|.

LastKeyPressed()				*zeef.LastKeyPressed()*
		The most recently pressed key. This may be used in the
		callback to determine how Zeef was dismissed.

		For example, suppose that you want to define a zeef similar to
		|zeef.BufferSwitcher()|, but one that deletes the selected
		buffers when CTRL-D is pressed. You may define an alias for
		<enter> and then use |LastKeyPressed()| in the callback to
		determine how Zeef was dismissed:
>
		import autoload 'zeef.vim'

		# Make CTRL-D an alias for Enter
		zeef.keyaliases = {"\<c-d>": "\<enter>"}
	
		def Callback(items: list<string>)
		  if zeef.LastKeyPressed() == "\<c-d>"
		    for item in items
		      echo $':bdelete {matchstr(item, '^\s*\zs\d\+')}'
		    endfor
		  else
		    echo "Possibly do something else with the items"
		  endif
		enddef
	
		def Buffers()
		  var buffers = split(execute('ls'), "\n")
		  zeef.Open(buffers, Callback, 'Choose')
		enddef
	
		Buffers()
<
		Here, the alias has been defined globally as a configuration
		option (with |zeef.keyaliases|). If you want to bind CTRL-D to
		<enter> only for this particular zeef but not for others, you
		may alternatively pass the binding as an argument to
		|zeef.Open()|:
>
		zeef.Open(
		  buffers, Callback, 'Choose', {
		    keyaliases: {"\<c-d>": "\<enter>"}
		  }
		)
<
LocationList([{nr}, {func}, {opts}])		*zeef.LocationList()*
		Interactively filter the lines from a location list and
		execute {func} on the selected items. For {nr}, see
		|getloclist()|. If {nr} is not specified, the location list of
		the current window is used. If {func} is not provided, the
		default behaviour is to jump to the first selected item. For
		instance:
>
		:call zeef#LocationList()
<
		For {opts}, see |zeef.Open()|. 

QuickfixList([{func}, {opts}])			*zeef.QuickfixList()*
		Interactively filter the lines from the quickfix list and
		execute {func} on the selected items. If {func} is not
		provided, the default behaviour is to jump to the first
		selected item. For instance:
>
		:call zeef#QuickfixList()
<
		For {opts}, see |zeef.Open()|. 

SelectedItems()					*zeef.SelectedItems()*
		Return the currently selected items. This is mainly useful in
		functions used with |zeef.keymap|.

=============================================================================
3. Customization				*zeef-customization*

Zeef defines the following highlight groups, which you may redefine in your
|vimrc|:

- `ZeefMatch`: used for highlighting the matching characters.
- `ZeefName`: used for highlighting the name of the buffer in the status line.
- `ZeefPopupWinColor`: the color of the Selected Items popup.
- `ZeefPopupBorderColor`: the color of the border of the popup.
- `ZeefPopupScrollbarColor` : the color of scrollbar of the popup.
- `ZeefPopupScrollbarThumbColor`: the color of the scrollbar thumb.

There are two mechanisms to configure Zeef: one uses good old global variables
and the other directly sets Zeef script variables. Which one to use is mostly
a matter of taste.

For each global setting of the form `g:zeef_<setting>`, Zeef exports a script
variable called `<setting>` with the same meaning. For example, to use exact
pattern matching when the Zeef buffer is initially opened, set |g:zeef_fuzzy|
or |zeef.fuzzy| to |false|. The latter is recommended because it does not
pollute the global space, and settings may be changed on the fly and take
effect the next time Zeef is opened. Changes to global variables are applied
only if they are done before the Zeef script is loaded.

Note: from the command line you may have to use a slightly different syntax.
For example, to open Zeef with exact pattern matching, use:
>
	:let zeef#fuzzy = 0
<
Prepend `let`, use `#` instead of `.` and `0/1` instead of `false/true`.

						*'zeef.exactlabel'*
						*'g:zeef_exactlabel'*
The string to be used in the prompt to indicate that exact matching is active.
>
	zeef.exactlabel = "[Exact]"
<
						*'zeef.fuzzy'*
						*'g:zeef_fuzzy'*
When |true|, open Zeef buffers in fuzzy mode. Set to |false| to open Zeef
buffers in exact mode. You may use CTRL-Z to switch between fuzzy and exact
search at any time while the Zeef buffer is open.
>
	zeef.fuzzy = true
<
						*'zeef.fuzzylabel'*
						*'g:zeef_fuzzylabel'*
The string to be used in the prompt to indicate that fuzzy matching is active.
>
	zeef.fuzzylabel = "[Fuzzy]"
<
						*'zeef.keyaliases'*
						*'g:zeef_keyaliases'*
Use this to set your own mappings for the various actions in Zeef. This is
done by associating your own key to a default Zeef key mapping.
>
	zeef.keyaliases: dict<string> = {}
<
For example, suppose you want to use <c-s> to select an item and <tab> to
dismiss Zeef and open a split window (therefore inverting the default
behaviour), and additionally use <c-h> to scroll horizontally to the left.
Then, you may define:
>
	zeef.keyaliases = {
	  "\<c-s>": "\<tab>",
	  "\<tab>": "\<c-s>"
	  "\<c-h>": "\<left>",
	}
<
The target keys (the dictionary values) must be those defined in
|zeef-introduction|.

						*'zeef.keymap'*
						*'g:zeef_keymap'*
A |Dictionary| that maps keys to arbitrary functions. Such functions should
take no arguments and return no value. Inside such functions, you may get the
last key press with |zeef.LastKeyPressed()| and the currently selected items
with |zeef.SelectedItems()|.
>
	zeef.keymap: dict<func()> = {}
<
The following is a silly example, hijacking the functionality of <enter>:
>
	zeef.keymap = {"\<enter>": () => {
	  popup_dialog(split(execute('smile'), "\n"), {time: 10})
	}}
<
As another example, the following sets CTRL-W to change Zeef's window color to
the currently selected item:
>
	vim9script
	import autoload "zeef.vim"

	var keymap = {"\<c-w>": () => {
	  var highlight = zeef.SelectedItems()
	
	  if len(highlight) > 0
	    &wincolor = highlight[0]
	  endif
	}}
	
	zeef.Open(['Search', 'Identifier', 'Normal'], 
	  v:none, v:none, {keymap: keymap, multi: false}
	)
<
Note: key mappings may be overridden for the duration of a single zeef, too:
see |zeef.Open()|.
						*'zeef.limit'*
						*'g:zeef_limit'*
The maximum number of fuzzy matches to display. Zero means no limit. See also
|matchfuzzy()|.
>
	zeef.limit = 100 
<
						*'zeef.matchseq'*
						*'g:zeef_matchseq'*
When |true|, fuzzy matching only returns matches that contain the characters
in the user input in the order in which they have been typed. See
|matchfuzzy()| for the details.
>
	zeef.matchseq = false 
<
						*'zeef.popupborder'*
						*'g:zeef_popupborder'*
Border thickness of the Selected Items popup. See |popup_create-arguments|.
>
	zeef.popupborder = [1, 1, 1, 0]
<						*'zeef.popupborderchars'*
						*'g:zeef_popupborderchars'*
Characters defining the Selected Items popup border. See |popup_create-arguments|.
>
	zeef.popupborderchars = ['─', ' ', '─', ' ', ' ', ' ', ' ', ' ']
<
						*'zeef.popupmaxheight'*
						*'g:zeef_popupmaxheight'*
The maximum height of the Selected Items popup.
>
	zeef.popupmaxheight = 100 
<
Note that the height is limited by the number of screen lines in any case.

						*'zeef.prompt'*
						*'g:zeef_prompt'*
The string to be used for the command line prompt:
>
	zeef.prompt = ' ❯ ' 
<
						*'zeef.reuselastmode'*
						*'g:zeef_reuselastmode'*
Set to |true| to reopen Zeef in the last (exact or fuzzy) mode in which it was
closed. The default is to always open Zeef in the mode determined by
|zeef.fuzzy|.
>
	zeef.reuselastmode = false
<
						*'zeef.sidescroll'*
						*'g:zeef_sidescroll'*
The amount of characters to shift when scrolling horizontally with the arrow
keys.
>
	zeef.sidescroll = 5
<
						*'zeef.skipfirst'*
						*'g:zeef_skipfirst'*
Do not start filtering until at least this number of characters has been
typed. This may help with very large lists.
>
	zeef.skipfirst = 0
<
						*'zeef_stlname'*
						*'g:zeef_stlname'*
The label of the Zeef buffer, as it appears in the status line.
>
	zeef.stlname = 'Zeef'
<
						*'zeef.winheight'*
						*'g:zeef_winheight'*
The number of lines of the Zeef buffer.
>
	zeef.winheight = 10
<
						*'zeef.winhighlight'*
						*'g:zeef_winhighlight'*
Highlight group name to use for the Zeef window instead of Normal. See
|wincolor|.
>
	zeef.winhighlight = ''
<
 vim:tw=78:ts=8:noet:ft=help:norl:
